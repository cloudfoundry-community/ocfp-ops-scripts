#!/usr/bin/env bash

# Author: Wayne E. Seguin

usage() {
  cat <<USAGE

Usage: $0 <env-file-name> <deployments-kit-name>

Where:
  <env-file-name> is an env name (declared intent, does not need to exist yet)
  <deployments-kit-name> is one of bosh, cf, autoscaler, scheduler, stratos, concourse

Requirements:

  * \`safe\` is in the path, targeting, and authenticated via token
  * \`psql\` is in the path, version 14 or later
  * postgres database information is stored in vault by terraform outputs according
    to the ocfp contracts, eg:
      \${OCFP_VAULT_PREFIX}/tf/\${OCFP_ENV_NAME//-/\/}/\${env_type//-/\/}/dbs/\${kit}/db:{key}
      Where {key} is in hostname, postgres_username, postgres_password, port,
        scheme, {kit dbs}_{username,_password}
      Ex: bosh kit will have kit dbs: bosh, uaa, and credhub
   * VAULT_NAMESPACE may be set and exported, if required, it will be exported
   * OCFP_VAULT_PREFIX may be set and exported, if required, defaults to 'secret/'
   * OCFP_VAULT_ENV_PREFIX must be set and exported
   * OCFP_VAULT_TF_PREFIX must be set and exported

USAGE
}

fail() { echo -e "$*" >&2 ; exit 1 ; }

pg::psql() {
  local _db="$1"
  shift
  \psql "${PG_URI}/${_db}" "$*"
}

pg::set::contract::secrets() {
  local _u="$1"
  local _p="$2"
  local _h="$3"
  local _o="$4"
  local _d="$5"

  echo -e "\nvault: ${src_path} -> ${dst_path}/db/${_d}"

  safe set "${dst_path}/db/${_d}" \
    hostname="${_h}" # Test for connection errors first

  # Q: Should scheme be postgres or postgresql? Official for uri is postgresql.
  # Q: Should we parameterize the sslmode?
  safe set "${dst_path}/db/${_d}" \
    scheme="postgres" \
    username="${_u}" \
    password="${_p}" \
    hostname="${_h}" \
    port="${_o}" \
    database="${_d}" \
    sslmode="enable" \
    uri="postgresql://${_u}:${_p}@${_h}:${_o}/${_d}?sslmode=verify-full" \
    &> /dev/null # Do not leak credentials to output

  safe cp "${OCFP_VAULT_PREFIX}/certs/dbs:ca" "${dst_path}/db/${_d}:ca"
}

pg::prepare() {
  local src_path="${OCFP_VAULT_TF_PATH}/dbs/${kit}"
  local dst_path="${OCFP_VAULT_ENV_PATH}/${kit}"

  PG_HOSTNAME="$(safe get "${src_path}:hostname")"
  PG_USERNAME="$(safe get "${src_path}:postgres_username")"
  PG_PASSWORD="$(safe get "${src_path}:postgres_password")"

  [[ -n ${PG_HOSTNAME} ]] || 
    fail "Could not find hostname at ${src_path}:hostname"

  [[ -n ${PG_USERNAME} ]] || 
    fail "Could not find username at ${src_path}:postgres_username"

  [[ -n ${PG_PASSWORD} ]] || 
    fail "Could not find password at ${src_path}:postgres_password"

  PG_URI="postgresql://${PG_USERNAME}:${PG_PASSWORD}@${PG_HOSTNAME}:5432"

  local _db
  for _db in ${@}; do
    local _u="$(safe get "${src_path}:${_db}_username")"
    local _p="$(safe get "${src_path}:${_db}_password")"
    local _o="${PG_PORT:-5432}"

    echo -e "Initializing: postgresql://${_u}@${PG_HOSTNAME}/${_db}"
    pg::psql "${_db}" -c "CREATE DATABASE ${_db};"

    local _ext
    for _ext in citext pgcrypto 
    do pg::psql "${_db}" -c "CREATE EXTENSION IF NOT EXISTS ${_ext};"
    done

    pg::psql "postgres" -c "CREATE USER ${_u};"
    pg::psql "postgres" -c "ALTER USER ${_u} WITH ENCRYPTED PASSWORD '${_p}';"
    pg::psql "postgres" -c "GRANT CONNECT ON DATABASE ${_db} TO ${_u};"
    pg::psql "postgres" -c "GRANT ALL PRIVILEGES ON DATABASE ${_db} TO ${_u};"
    pg::psql "postgres" -c "GRANT USAGE ON SCHEMA public TO ${_u};"
    pg::psql "postgres" -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${_u};"
    pg::psql "postgres" -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${_u};"

    pg::set::contract::secrets "${_u}" "${_p}" "${PG_HOSTNAME}" "${_o}" "${_db}"
  done
}

__parse::args() {
  while [[ $# > 0 ]]
  do
    action=$1 ; shift
    case "${action}" in
      (region)
        OCFP_REGION=$1
        shift || fail "${0//*/} ... env <name>"
        ;;
      (env) 
        env_name="$1" 
        shift || fail "${0//*/} ... env <name>"
        ;;
      (kit) 
        kit="$1" 
        shift || fail "${0//*/} ... kit <name>"
        case ${kit} in
          (bosh|cf|blacksmith|shield|concourse|autoscaler|scheduler|vault|jumpbox) true ;;
          (*) fail "Unsupported kit: ${kit}" ;;
        esac
        ;;
      (*) fail "$(usage)" ;;
    esac
  done
  
  env_name="${env_name%.yml}"
  case "${env_name}" in
    (*-mgmt-*) env_type="mgmt" ;;
    (*)        env_type="ocf"  ;;
  esac
  
  [[ -n ${env_name} ]] || fail "'env <name>' required"
  [[ -n ${kit} ]]      || fail "'kit <name>' required"
  [[ -n ${OCFP_REGION} ]] || fail "'region <name>' required"
  [[ -n ${VAULT_NAMESPACE} ]] && export VAULT_NAMESPACE
  [[ -n ${OCFP_VAULT_ENV_PREFIX:-} ]] || fail "OCFP_VAULT_ENV_PREFIX must be set and exported."
  [[ -n ${OCFP_VAULT_TF_PREFIX:-} ]] || fail "OCFP_VAULT_ENV_PREFIX must be set and exported."
}

timestamp="$(date +%Y-%m-%dT%H:%M:%S)"
logs_path="$HOME/.ocfp/logs"
mkdir -p ${logs_path}
exec &> >(tee -a "${logs_path}/ocfp-init-pg.${timestamp}.log")

[[ $# > 1 ]] || fail "$(usage)"

__parse::args "$@"

case "${kit}" in
  (bosh)
    pg::prepare bosh uaa credhub
    ;;
  (cf) # Question, is it routing_api or routing-api?
    pg::prepare cloud_controller credhub diego locket network_connectivity network_policy routing_api uaa
    ;;
  (autoscaler)
    kit="cf-app-autoscaler" # :/ # Contract FAIL
    pg::prepare autoscaler # NOTE: BUG: safe set ${safe_path}/cf-app-autoscaler/db password="" # Contract FAIL
    ;;
  (scheduler)
    pg::prepare scheduler
    ;;
  (stratos)
    pg::prepare stratos # console_db <- default, Can we make this stratos to align with the contract?
    ;;
  (concourse)
    pg::prepare concourse # ats <- default, Can we make this concourse to align with the contract?
    ;;
  (*)
    fail "$(usage)"
    ;;
esac

exit 0
