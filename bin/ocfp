#!/usr/bin/env bash

usage() {
  echo -e "$(cat <<EOT

USAGE ${0//*/} <pg|env> <kit> <full-genesis-env-name> [<args>]

WHERE

  init-pg - Initializing the pg databases via vault data, and update env data in vault

  init-env - Generating env files from templates via vault data

WHERE init-env <args> IN

  region <region> # Reqired

  kit <kit-name> # Required: bosh, cf, blacksmith, shield, concourse, autoscaler, scheduler, vault, jumpbox

  name <env-name> # Required. Ex: ocfp-codex-mgmt-us-east-1, ocfp-codex-us-east-1

  type <mgmt|ocf> # NOTE: default type is 'ocf', only need to specify for 'mgmt'

  vault-prefix "secret/...." # optional - only to override the default 'secret/'

  NOTE: Kit env template are expected at: '${templates_path}/env/<kit-name>'

USAGE
EOT
)"
exit 0
}

fail() { echo -e "$*" >&2 ; exit 1 ; }

templates_path="${0%\/ocfp}/templates"
cmd=$1 
shift || usage
case ${cmd} in
  (init-pg)
    echo "TODO: Merge with pg init script -> ocpf-init"
    ;;
  (init-env)
    while [[ $# > 0 ]]
    do
      action=$1
      shift || usage
      case ${action} in
        (vault-prefix)
          export OCFP_VAULT_PREFIX="${1}" # override default of secret/
          ;;
        (region)
          export OCFP_REGION=$1 # ex: us-east-1, us-west-2
          shift || fail "${0//*/} ... region <region>"
          ;;
        (kit)
          export OCFP_KIT=$1
          shift || fail "${0//*/} ... kit <kit>"
          case ${OCFP_KIT} in
            (bosh|cf|blacksmith|shield|concourse|autoscaler|scheduler|vault|jumpbox) true ;;
            (*) fail "Unsupported kit: ${OCFP_KIT}" ;;
          esac
          ;;
        (name)
          export OCFP_ENV_NAME=${1//.yml}
          shift || fail "${0//*/} ... name <env-name> # ex: ocfp-codex-mgmt-us-east-1 / ocfp-codex-us-east-1"
          ;;
        (type)
          export OCFP_ENV_TYPE=$1
          shift || fail "${0//*/} ... type <env-type> # mgmt | ocf"
          case ${OCFP_ENV_TYPE} in
            (mgmt|ocf) true ;;
            (*) fail "Unsupported env-type '${OCFP_ENV_TYPE}'\n${0//*/} env type <env-type> # mgmt | ocf"
              ;;
          esac
          ;;
        (iaas)
          export OCFP_IAAS=$1
          shift || fail "${0//*/} ... iaas <aws|azure|gcp|openstack|vsphere|warden>"
          case ${OCFP_IAAS} in
            #NOTE: Upstream are alicloud aws azure cloudstack docker gcp openstack softlayer vcloud virtualbox vsphere warden
            (aws|azure|gcp|openstack|vsphere|warden) true ;;
            (*) fail "Unsupported IAAS type: ${OCFP_IAAS}" ;;
          esac
          ;;
        (*)
          usage
          ;;
      esac
    done
    [[ -n ${OCFP_ENV_NAME} ]] || fail "'env <name>' must be given"
    [[ -n ${OCFP_KIT} ]] || fail "'kit <name>' must be given"
    case $OCFP_KIT in
      (bosh)
        [[ -n ${OCFP_IAAS} ]] || fail "'iaas <aws|gcp|azure>' must be given"
        [[ -n ${OCFP_REGION} ]] || fail "'region <region>' must be given"
        [[ -n ${OCFP_ENV_TYPE} ]] || fail "'region <region>' must be given"
        ;;
    esac

    if [[ -s ${OCFP_ENV_NAME}.yml ]] 
    then
      fail "ERROR: ${OCFP_ENV_NAME}.yml already exists, rename it and re-run."
    else
      echo -e "Generating Genesis Env File From Kit Template...\n\t-> ${OCFP_ENV_NAME}.yml"
      bash "${templates_path}/env/${OCFP_KIT}" > ${OCFP_ENV_NAME}.yml
      exit $?
    fi
    ;;
  (*)
    usage
    ;;
esac


