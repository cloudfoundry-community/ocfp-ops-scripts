#!/usr/bin/env bash

# Author: Wayne E. Seguin

usage() {
  echo -e "$(cat <<EOT

USAGE ${0//*/} <pg|env> <kit> <full-genesis-env-name> [<args>]

WHERE

  init-pg - Initializing the pg databases via vault data, and update env data in vault

  init-env - Generating env files from templates via vault data

WHERE init-env <args> IN

  region <region> # Reqired

  kit <kit-name> # Required: bosh, cf, blacksmith, shield, concourse, autoscaler, scheduler, vault, jumpbox

  name <env-name> # Required. Ex: ocfp-codex-mgmt-us-east-1, ocfp-codex-us-east-1

  vault-prefix "secret/...." # optional - only to override the default 'secret/'

  NOTE: Kit env template are expected at: '${templates_path}/env/<kit-name>'

USAGE
EOT
)"
exit 0
}

fail() { echo -e "$*" >&2 ; exit 1 ; }

__parse::args() {
  local _action
  while [[ $# > 0 ]]
  do
    _action="${1}" ; shift
    case ${_action} in
      (vault-prefix)
        export OCFP_VAULT_PREFIX="${1}" # override default of secret/
        ;;
      (region)
        export OCFP_REGION=$1 # ex: us-east-1, us-west-2
        shift || fail "${0//*/} ... region <region>"
        ;;
      (kit)
        export OCFP_KIT=$1
        shift || fail "${0//*/} ... kit <name>"
        case ${OCFP_KIT} in
          (bosh|cf|blacksmith|shield|concourse|autoscaler|scheduler|vault|jumpbox) true ;;
          (*) fail "Unsupported kit: ${OCFP_KIT}" ;;
        esac
        ;;
      (env|name)
        export OCFP_ENV_NAME=${1//.yml}
        shift || fail "${0//*/} ... name <env-name> # ex: ocfp-codex-mgmt-us-east-1 / ocfp-codex-us-east-1"
        ;;
      (iaas)
        export OCFP_IAAS="$1"
        shift || fail "${0//*/} ... iaas <aws|azure|gcp|openstack|vsphere|warden>"
        case ${OCFP_IAAS} in
          #NOTE: Upstream are alicloud aws azure cloudstack docker gcp openstack softlayer vcloud virtualbox vsphere warden
          (aws|azure|gcp|openstack|vsphere|warden) true ;;
          (*) fail "Unsupported IAAS type: ${OCFP_IAAS}" ;;
        esac
        ;;
      (bosh)
        export OCFP_BOSH_ENV="$1"
        shift || fail "${0//*/} ... bosh <bosh-env-name>"
        ;;
      (*)
        usage
        ;;
    esac
  done

  [[ -n ${OCFP_ENV_NAME} ]] || fail "'env <name>' must be given"
  [[ -n ${OCFP_REGION} ]]   || fail "'region <region>' must be given"
  [[ -n ${OCFP_KIT} ]]      || fail "'kit <name>' must be given"

  __set::env::type

  # All envs need to know their deployer/bosh_env, mgmt bosh is the exception
  if ! [[ ${OCFP_KIT} == "bosh" && ${env_type} == "mgmt" ]]
  then [[ -n ${OCFP_BOSH_ENV} ]] || fail "'bosh <bosh-env-name>' must be given"
  fi

  case ${OCFP_KIT} in
    (bosh)
      [[ -n ${OCFP_IAAS} ]] || fail "'iaas <aws|gcp|azure>' must be given"
      ;;
  esac
}

__set::env::type() {
  case "${OCFP_ENV_NAME}" in
    (*-mgmt-*) env_type="mgmt" ;;
    (*)        env_type="ocf"  ;;
  esac
}

__init::pg() {
  echo -e "Initializing PG databases for env...\n\t-> ${OCFP_ENV_NAME}.yml"
  bash "${templates_path}/pg/init" env "${OCFP_ENV_NAME}" kit "${OCFP_KIT}" region "${OCFP_REGION}"
}

__init::env() {
  local _src_path _dst_path
  if [[ -s ${OCFP_ENV_NAME}.yml ]] 
  then
    fail "ERROR: ${OCFP_ENV_NAME}.yml already exists, rename it and re-run."
  fi

  __set::env::type

  case "${OCFP_KIT}" in
    (bosh)
      case "${OCFP_IAAS}" in
        (aws)
          _src_path="${OCFP_VAULT_PREFIX}/iam/${env_type}"
          _dst_path="${OCFP_VAULT_PREFIX}/${OCFP_ENV_NAME//-/\/}/bosh"
          safe cp "${_src_path}/bosh" "${_dst_path}/aws"
          safe cp "${_src_path}/s3" "${_dst_path}/blobstore/s3"
          ;;
        (*) fail "Not Yet Implemented" ;;
      esac
      ;;
  esac

  if [[ -n ${OCFP_BOSH_ENV} ]]
  then safe set "${_dst_path}/env" bosh="${OCFP_BOSH_ENV}"
  fi

  echo -e "Generating Genesis Env File From Kit Template...\n\t-> ${OCFP_ENV_NAME}.yml"
  bash "${templates_path}/env/${OCFP_KIT}" > ${OCFP_ENV_NAME}.yml
  exit $?
}

__init::all() {
  __init::pg "$@"
  __init::env "$@"
}

templates_path="${0%\/ocfp}/templates"
cmd=$1 
shift || usage

__parse::args "$@"

case ${cmd} in
  (init)     __init::all "$@" ;;
  (init-pg)  __init::pg "$@"  ;;
  (init-env) __init::env "$@" ;;
  (*) usage ;;
esac

