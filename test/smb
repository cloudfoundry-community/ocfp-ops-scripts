#!/usr/bin/env bash

# Author: Haochen Hu

fail() { echo -e "\e[31mERROR:\e[0m $*" >&2 ; exit 1 ; }

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

run() { echo -e "\e[32m$*\e[0m" ; "$@" ; }

header() {
  local token="="
  local line=$(printf "${token}%.0s" {1..80})
  echo -e "\n${line}\n${token} $*\n${line}"
}

usage() {
  echo -e "$(cat <<EOT

USAGE

  ${0//*/} <task> <args>

WHERE <task> IN

  test-space - loop over the spaces provided
  clean-up   - clean up service, app, and space created during testing

WHERE clean-up <args> IN

  -s|--space <name>  # Required 

WHERE test-service <args> IN

  -e|--env <name>          # Required 
  -s|--space <name>        # Required 
  -m|--mount <targets>     # Required
  -p|--password <password> # Required for smb
  -u|--username <username> # Required for smb

PRE-REQUISITES

  For services in isolation-segments, segments have been created, enabled segments to orgs and spaces.

EOT
)"
exit 0
}

parse::args() {
  debug "${FUNCNAME} $*"
  local _action
  while [[ $# > 0 ]]
  do
    _action="${1}" ; shift
    case ${_action} in
      (-e|--env|env)
        env_name=( "${1//.yml}" )
        shift || fail "environment name cannot be empty" ;;
      (-s|--space|space)
        spaces+=("${1}")
        shift || fail "service name cannot be empty"
        ;;
      (-m|--mount|mount)
        mount_path="${1}"
        shift || fail "mount target cannot be empty"
        ;;
      (-u|--username|username)
        username="${1}" 
        shift || fail "username cannot be empty"
        ;;
      (-p|--password|password)
        password="${1}"
        shift || fail "password cannot be empty"
        ;;
      (--help|-h)
        usage
        ;;
      (*)
        fail "Unknown option: ${_action}"
        ;;
    esac
  done
}

app::create::bind::smb() {
  debug "${FUNCNAME} $*"
  echo " creating smb service ${service_name} and mounting ${mount_path} "

  echo "{\"share\":\"${mount_path}\"}" \
    > ${service_name}-config.json

  cf create-service smb Existing ${service_name} \
    -c ${service_name}-config.json

  echo " binding service ${service_name} to ${app_name} "

  echo "{\"username\":\"${username}\",\"password\":\"${password}\"}" \
    > ${service_name}-creds.json

  cf bind-service ${app_name} ${service_name} -c ${service_name}-creds.json

  rm -f ${service_name}-creds.json

  echo " restaging app ${app_name}"

  cf restage ${app_name}
}

test::smb::service() {
  debug "${FUNCNAME} $*"
  header "Testing SMB"

  declare -a instances ips

  local app_guid app_process_0 cell_ip

  app_guid=$(cf app ${app_name} --guid)

  app_process_0=$(cf curl /v3/apps/${app_guid}/processes |
    jq -r '.resources[].guid'
  )

  cell_ip=$( cf curl /v3/processes/${app_process_0}/stats |
    jq -r '.resources[0].host'
  )

  cell_name=$(
    gb ips ${env_name} -cf --json 2>/dev/null |
      jq -r '.Tables[].Rows[] | select(.ips | contains("'${cell_ip}'")) | .instance'
  )

  echo -e "\nChecking if ${smb_mount_path} exists in ${cell_name}..."

  gb s ${env_name} -cf ${cell_name} -c "cat ${smb_mount_path}/*/*"
}

clean::up() {
  debug "${FUNCNAME} $*"

  for space in ${spaces[@]}
  do
    service_name="smb-${space}"
    app_name="pora-smb-${space}"

    run cf target -o system -s ${space}

    run cf delete-service ${service_name}

    run cf delete ${app_name} -f
  done
}

# NOTE: archive must be in place before the script is called
test::spaces() {
  debug "${FUNCNAME} $*"

  apps::fetch 

  run cd ${apps_path}/${archive/.zip}/assets/pora

  for space in ${spaces[@]}
  do
    service_name="smb-${space}"
    app_name="pora-smb-${space}"

    app::push

    app::create::bind::smb

    test::smb::service
  done
}

cf::login() {
  debug "${FUNCNAME} $*"

  local env=$1
  ( cd ~/deployments/cf
    genesis ${env} do login
  ) || fail "Failed to login to ${env}!"
}
 
apps::fetch() {
  debug "${FUNCNAME} $*"

  cd ${apps_path}

  if [[ ! -d ${apps_path}/${archive/.zip} ]]
  then
    if ! [[ -s ${apps_path}/${archive} ]]
    then true # TODO: curl -sOL ${RMQ_APP_URL}/${archive}
    fi
    unzip ${apps_path}/${archive} ||
      fail "Unable to unarchive /opt/ocfp/apps/${archive}"
  fi
}

app::push() {
  debug "${FUNCNAME} $*"

  run cf target -o system -s ${space}

  cd ${apps_path}/${archive/.zip}/assets/pora

  run cf push ${app_name} -f manifest.yml
}

declare -a spaces

declare \
  smb_mount_path="/var/vcap/data/volumes/smb" \
  archive="cf-volume-services-acceptance-tests-master.zip" \
  apps_path="${OCFP_PROJECT_PATH:-${HOME}/apps}" \
  org=system \
  action

mkdir -p ${apps_path} && cd ${apps_path}

task=$1 ; shift || usage

parse::args "$@"

cf::login ${env_name}

case ${task} in 
  (test-spaces)
    test::spaces
    ;;
  (clean-up)
    clean::up
    ;;
  (*)
		usage
		;;
esac

exit 0
