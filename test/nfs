#!/usr/bin/env bash

# Author: Haochen Hu

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

fail() { echo -e "\e[31mERROR:\e[0m $*" >&2 ; exit 1 ; }

run() { echo -e "\e[32m$*\e[0m" ; "$@" ; }

header() {
  local token="=" line=$(printf "${token}%.0s" {1..80})
  echo -e "\n${line}\n${token} $*\n${line}"
}

usage() {
  echo -e "$(cat <<EOT

USAGE

  ${0//*/} <task> <args>

WHERE <task> IN

  test-space - loop over the spaces provided
  clean-up   - clean up service, app, and space created during testing

WHERE clean-up <args> IN

  -s|--space <name>  # Required 

WHERE test-service <args> IN

  -e|--env <name>          # Required 
  -s|--space <name>        # Required 
  -m|--mount <targets>     # Required
  -p|--password <password> # Required for nfs-ldap
  -u|--username <username> # Required for nfs-ldap

PRE-REQUISITES

  For services in isolation-segments, segments have been created, enabled segments to orgs and spaces.

EOT
)"
exit 0
}

parse::args() {
  debug "${FUNCNAME} $*"

  local _action
  while [[ $# > 0 ]]
  do
    _action="${1}" ; shift
    case ${_action} in
      (-e|--env|env)
        env_name=( "${1//.yml}" )
        shift || fail "environment name cannot be empty"
        ;;
      (-s|--space|space)
        spaces+=("${1}")
        shift || fail "service name cannot be empty"
        ;;
      (-m|--mount|mount)
        mount_path="${1}"
        shift || fail "mount target cannot be empty"
        ;;
      (-u|--username|username)
        username="${1}" 
        shift || fail "username cannot be empty"
        ;;
      (-p|--password|password)
        password="${1}"
        shift || fail "password cannot be empty"
        ;;
      (--help|-h)
        usage
        ;;
      (*)
        fail "Unknown option: ${_action}"
        ;;
    esac
  done
}

nfs::config(){
  debug "${FUNCNAME} $*"

  nfs_ldap=true # TODO: check for nfs vs nfs-ldap
  if [[ ${nfs_ldap} == true ]]
  then
    echo "{\"share\":\"${mount_path}\", \"username\":\"${username}\", \"password\":\"${password}\"}"
  else
    echo "{\"share\":\"${mount_path}\"}"
  fi
}

app::push() {
  debug "${FUNCNAME} $*"

  run cf target -o system -s ${space}

  run cf push ${app_name} -f manifest.yml
}

app::create::bind::nfs() {
  debug "${FUNCNAME} $*"

  echo -e "\nCreating nfs service ${service_name} with ldap and mounting ${mount_path}..."
  run cf create-service nfs Existing nfs-ldap -c "$( nfs::config )"

  echo -e "\nBinding service ${service_name} to ${app_name}..."
  run cf bind-service ${app_name} ${service_name}

  echo -e "\nRestaging app ${app_name}..."
  run cf restage ${app_name}
}

test::nfs::service() {
  debug "${FUNCNAME} $*"

  header "Testing NFS"

  local app_guid app_process_0 cell_ip

  app_guid=$(cf app ${app_name} --guid)

  app_process_0=$(cf curl /v3/apps/${app_guid}/processes |
    jq -r '.resources[].guid'
  )

  cell_ip=$( cf curl /v3/processes/${app_process_0}/stats |
    jq -r '.resources[0].host'
  )

  cell_name=$( 
    gb ips ${env_name} -cf --json |
      jq -r '.Tables[].Rows[] | select(".ips" | contains("'${cell_ip}'")) | .name'
  )

  echo "\nChecking if ${nfs_mount_path} exists in ${cell_name}..."

  gb s ${env_name} -cf ${cell_name} -c "ls ${nfs_mount_path}/*/*"
}

clean::up() {
  debug "${FUNCNAME} $*"

  for space in ${spaces[@]}
  do
    run cf target -o system -s ${space}

    run cf delete-service ${service_name}

    run cf delete ${app_name} -f
  done
}

# NOTE: archive must be in place before the script is called
test::spaces() {
  debug "${FUNCNAME} $*"

  local archive="cf-volume-services-acceptance-tests-master.zip"

  apps::fetch 

  cd ${apps_path}/${archive/.zip}

  sed -i 's/go_buildpack/go_buildpack_current/' manifest.yml

  for space in ${spaces[@]}
  do
    service_name="nfs-ldap-${space}"
    app_name="pora-nfs-ldap-${space}"

    app::push

    app::create::bind::nfs

    test::nfs::service
  done

  clean::up
}

cf::login() {
  debug "${FUNCNAME} $*"

  local env=$1
  ( cd ~/deployments/cf
    genesis ${env} do login
  ) || fail "Failed to login to ${env}!"
}
 
apps::fetch() {
  debug "${FUNCNAME} $*"

  local archive="cf-volume-services-acceptance-tests-master.zip"

  if [[ ! -d ${apps_path}/${archive/.zip} ]]
  then
    if ! [[ -s ${apps_path}/${archive} ]]
    then
      ( cd ${apps_path}
        # curl -sOL ${RMQ_APP_URL}/${archive}
      )
    fi
    ( cd ${apps_path}
      run unzip /opt/ocfp/apps/${archive}
    )
  fi
}

declare -a spaces

declare \
  nfs_mount_path=/var/vcap/data/volumes/nfs \
  org=system \
  apps_path=${OCFP_PROJECT_PATH:-${HOME}/apps} \
  action

mkdir -p ${apps_path} && cd ${apps_path}

task=$1 ; shift || usage

parse::args "$@"

cf::login ${env}

case ${task} in 
  (test-spaces)
    test::spaces
    ;;
  (clean-up)
    clean::up
    ;;
  (*)
		usage
		;;
esac

exit 0
