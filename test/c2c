#!/usr/bin/env bash

################################################################################
# Functions
################################################################################
fail() { echo -e "$*" >&2; exit 1; }

run() { echo -e "\$ $*"; "$@"; }

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

usage() {
  fail "Usage: ${0//*\/} <fetch|push|test|delete|setup|all> <space> [<space> ...]"
}

parse::args() {
  debug "${FUNCNAME} $*"
  while [[ $# > 0 ]]
  do
    case $1 in
      (fetch|push|test|delete|all|setup)
        action=${1}
        shift
        ;;
      (env)
        env=$2
        shift 2 || fail "Usage: ...env <name>"
        ;;
      (space|s)
        spaces+=("$2")
        shift 2 || fail "Usage: ...space <name> [space <name>...]"
        ;;
      (*)
        fail "Unknown arg: '$1'\nUsage: space <name> [space <name>...]"
        ;;
    esac
  done
  [[ ${#spaces[@]} > 0 ]] || fail "Usage: ${action} space <name> [space <name>...]"
}

apps::c2c::login() {
  debug "${FUNCNAME} $*"
  local env=$1
  cd ~/deployments/cf
  genesis ${env} do login || fail "Failed to login to ${env}!"
}

apps::c2c::fetch() {
  debug "${FUNCNAME} $*"
  if [[ ! -d ${apps_path}/c2c-feature-tests ]]
  then
    if [[ ! -s c2c-feature-tests.tar.gz ]]
    then # TODO:
      echo "Missing c2c-feature-tests.tar.gz, please download and try again."
      true #run curl -sOL https://.../c2c-feature-tests.tar.gz
    fi
    run tar zxf c2c-feature-tests.tar.gz -C ${apps_path}
  fi

  cd ${apps_path}/c2c-feature-tests

  for a in frontend backend-b
  do
    d="${apps_path}/c2c-feature-tests/${a}"
    [[ -d ${d} ]] || fail "Missing app ${a} directory ${d}"
  done
}

apps::c2c::push() {
  debug "${FUNCNAME} $*"
  for space in ${spaces[@]}
  do
    backend=test-c2c-backend-b-${space}
    frontend=test-c2c-frontend-${space}
    domain=apps.internal # TODO: can we fetch this from cf api?

    run cf target -o ${org} -s ${space}

    run cf push ${frontend} --random-route \
      -p ${apps_path}/c2c-feature-tests/frontend \
      -f ${apps_path}/c2c-feature-tests/frontend/manifest.yml \

    run cf push ${backend} --no-start --no-route \
      -p ${apps_path}/c2c-feature-tests/backend-b \
      -f ${apps_path}/c2c-feature-tests/backend-b/manifest.yml \

    cf set-env ${backend} CATS_PORTS "7007,7008"
    cf set-env ${backend} UDP_PORTS "9001,9002"

    run cf map-route ${backend} ${domain} -n ${backend}
    run cf start ${backend}
  done
}

apps::c2c::delete() {
  debug "${FUNCNAME} $*"
  for space in ${spaces[@]}
  do
    backend=test-c2c-backend-b-${space}
    frontend=test-c2c-frontend-${space}

    run cf target -o ${org} -s ${space}

    run cf delete -f ${frontend}
    run cf delete -f ${backend}
  done
}

apps::app::curl() {
  debug "${FUNCNAME} $*"
  local app=$1
  local app_guid=$(cf app ${app} --guid)
  cf curl /v3/apps/${app_guid}/env |
    jq -r '.application_env_json.VCAP_APPLICATION.application_uris[0]'
}

apps::c2c::test::curl() {
  debug "${FUNCNAME} $*"
  local app=$1 target=$2 port=${3:-7007} status=
  local app_url=$(apps::app::curl ${app})
  local url="http://${app_url}/proxy/?url=${target}.${internal_domain}:${port}"

  debug "curl -sk -o /dev/null -w \"%{http_code}\" "${url}" \| tr -d \'\"\'"

  if [[ ${app_url} == "nil" ]]
  then status=nil
  else status=$(curl -sk -o /dev/null -w "%{http_code}" "${url}" | tr -d '"')
  fi

  case ${status} in
    (200) echo -e "\e[32mPASS - ${status} OK\e[0m" ;;
    (nil) echo -e "\e[33mFAIL - ${status} NO APP URL\e[0m" ;;
    (000) echo -e "\e[31mFAIL - ${status} NETWORK ERROR\e[0m" ;;
    (*)   echo -e "\e[31mFAIL - ${status} FAIL\e[0m" ;;
  esac
}

apps::c2c::test::cf_ssh_curl() {
  debug "${FUNCNAME} $*"
  local app=$1 target=$2 port=${3:-7007} status=
  local url=http://${target}.${internal_domain}:${port}

  debug "cf ssh ${app} -c \"curl -sk -o /dev/null -w \"%{http_code}\" ${url}\" \| tr -d \'\"\'"

  status=$(cf ssh ${app} -c "curl -sk -o /dev/null -w \"%{http_code}\" ${url}" | tr -d '"')

  case ${status} in
    (200) echo -e "\e[32mPASS - ${status} OK\e[0m" ;;
    (000) echo -e "\e[31mFAIL - ${status} NETWORK ERROR\e[0m" ;;
    (*)   echo -e "\e[31mFAIL - ${status} FAIL\e[0m" ;;
  esac
}

apps::c2c::test::connectivity() {
  debug "${FUNCNAME} $*"
  local space_a=$1 space_b=$2
  printf "=%.0s" {1..80}
  echo -e "TEST org: ${org}, space ${space_a} -> space ${space_b}"
  printf "=%.0s" {1..80}

  run cf target -o ${org} -s ${space_a} &>/dev/null

  run cf add-network-policy \
    test-c2c-frontend-${space_a} \
    test-c2c-backend-b-${space_b} \
    --protocol tcp \
    --port 7007

  apps::c2c::test::cf_ssh_curl \
    test-c2c-frontend-${space_a} \
    test-c2c-backend-b-${space_b} 7007

  apps::c2c::test::curl \
    test-c2c-frontend-${space_a} \
    test-c2c-backend-b-${space_b} 7007
}

apps::c2c::test::connectivity::between() {
  debug "${FUNCNAME} $*"
  local space_a=$1 space_b=$2

  apps::c2c::test::connectivity ${space_a} ${space_b}

  [[ ${space_a} == ${space_b} ]] ||
    apps::c2c::test::connectivity ${space_b} ${space_a}
}

apps::c2c::test() {
  debug "${FUNCNAME} $*"
  for space in ${spaces[@]}
  do apps::c2c::test::connectivity::between ${space} ${space}
  done

  for space in ${spaces[@]}
  do 
    for s in ${spaces[@]}
    do
      [[ ${space} == ${s} ]] || continue
      apps::c2c::test::connectivity::between ${space} ${s}
    done
  done
}

################################################################################
# Variables & Init
################################################################################
declare -a spaces
declare \
  apps_path=${OCFP_PROJECT_PATH:-${HOME}/apps} \
  internal_domain=apps.internal \
  org=system \
  action= \

mkdir -p ${apps_path} && cd ${apps_path}

################################################################################
# Main
################################################################################
parse::args "$@"

apps::c2c::login ${env}

apps::c2c::fetch

case ${action} in
  (fetch)  apps::c2c::fetch  ;;
  (push)   apps::c2c::push   ;;
  (test)   apps::c2c::test   ;;
  (delete) apps::c2c::delete ;;
  (all)
    apps::c2c::fetch
    apps::c2c::push
    apps::c2c::test
    apps::c2c::delete
    ;;
  (setup)
    apps::c2c::fetch
    apps::c2c::push
    ;;
  (*) usage ;;
esac

exit 0
