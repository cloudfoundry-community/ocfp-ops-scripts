#!/usr/bin/env bash

# ocfp test tcp app-push env <name>
# ocfp test tcp app-test env <name>
# ocfp test tcp app-delete env <name>

# TODO: collect and print report of passed / failed tests.

################################################################################
# Functions
################################################################################
fail()  { echo -e "\e[31mERROR:\e[0m $*" >&2 ; exit 1 ; }

run()   { echo -e "\e[32m\$\e[0m $*"; "$@"; }

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

usage() {
  fail "Usage: ${0//*\/} <fetch|push|test|delete|setup|all> <space> [<space> ...]"
}

header() {
  local token="="
  local line=$(printf "${token}%.0s" {1..80})
  echo -e "\n${line}\n${token} $*\n${line}"
}

parse::args() {
  debug "${FUNCNAME} $*"
  while [[ $# > 0 ]]
  do
    case $1 in
      (app-push|app-test|app-delete)
        action=$1
        shift
        ;;
      (e|env)
        env_name=$2
        shift 2 || fail "Usage: ...env <name>"
        ;;
      (*)
        fail "Unknown arg: '$1'\nUsage: env <name> space <name> [space <name>...] <cmd>"
        ;;
    esac
  done
}

cf::login() {
  debug "${FUNCNAME} $*"

  local env=$1
  ( cd ~/deployments/cf
    genesis ${env} do login
  ) || fail "Failed to login to ${env}!"
  cf target -o system
}
 
apps::fetch() {
  debug "${FUNCNAME} $*"

  cd ${apps_path}

  if [[ ! -d ${apps_path}/${archive/.tar.gz} ]]
  then
    if ! [[ -s ${apps_path}/${archive} ]]
    then true # TODO: curl -sOL ${RMQ_APP_URL}/${archive}
    fi
    unzip ${apps_path}/${archive} ||
      fail "Unable to unarchive ${aps_path}/${archive}"
  fi
}

app::push() {
  debug "${FUNCNAME} $*"

  cd ${apps_path}/${archive/.tar.gz}

  run cf push test-${service}-app \
    -p ${apps_path}/${archive/.tar.gz} \
    -f ${apps_path}/${archive/.tar.gz}/manifest.yml
}

app::delete() {
  debug "${FUNCNAME} $*"

  run cf delete -f test-${service}-app
}

app::port() {
  debug "${FUNCNAME} $*"

  local app_name=$1
  local app_guid=$( cf app ${app_name} --guid )

  cf curl /v3/apps/${app_guid}/routes |
    jq -r '.resources[] | select(.port != null and (.url | contains("tcp"))) | .port'
}
 
apps::domain() {
  debug "${FUNCNAME} $*"

  local app_name=$1
  local app_guid=$( cf app ${app_name} --guid )

  cf curl /v3/apps/${app_guid}/routes |
    jq -r '.resources[] | select(.url | contains("'${1}'")) | .url' |
      sed -e "s/${1}\.//"
}

app::test() {
  debug "${FUNCNAME} $*"

  apps_domain=$(apps::domain test-${service}-app)
  debug "apps_domain: ${apps_domain}"

  run cf map-route test-${service}-app tcp.${apps_domain}

  port=$(app::port test-${service}-app)
  debug "port: ${port}"

  echo -e "curl -sk tcp.${apps_domain}:${port}"
  response=$(curl -sk tcp.${apps_domain}:${port})
  debug "response: ${response}"

  if [[ ${response} =~ "Cloud Foundry Environment" ]]
  then echo -e "\e[32m[PASS]\e[0m: Environment received!, test-${service}-app is listening on tcp port ${port}"
  else echo -e "\e[31m[FAIL]\e[0m: Environment not received! test-${service}-app is NOT listening on tcp port ${port}"
  fi
}
 
cf::space::create() {
  debug "${FUNCNAME} $*"
  run cf create-space -o ${org} ${space}
  run cf target -o ${org} -s ${space}
}

################################################################################
# Variables & Init
################################################################################
declare -a services apps spaces

declare \
  apps_path=${OCFP_PROJECT_PATH:-${HOME}/apps} \
  org=system \
  space=test-tcp-app \
  archive="cf-env.tar.gz" \
  service=tcp \
  action \
  apps_domain

mkdir -p ${apps_path} && cd ${apps_path}

################################################################################
# Main
################################################################################

parse::args "$@"

cf::login ${env_name}

cf::space::create

apps::fetch ${service}

case ${action} in
  (app-push)
    app::push
    ;;
  (app-test)
    app::test
    ;;
  (app-delete)
    app::delete
    ;;
  (*) usage ;;
esac
 
exit 0
