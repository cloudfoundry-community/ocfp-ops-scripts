#!/usr/bin/env bash

fail() { echo -e "\e[31mERROR:\e[0m $*" >&2 ; exit 1 ; }

run()  { echo -e "\e[32m\$\e[0m $*"; "$@"; }

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

usage() {
  echo -e "Usage: ${0//*\/} kit <name> env <name> [vault-prefix <secret/...>]" >&2
}

parse::args() {
  debug "${FUNCNAME[0]}: $*"
  local _action

  while [[ $# > 0 ]]
  do
    _action="${1}" ; shift
    case ${_action} in
      (vault-prefix)
        export OCFP_VAULT_PREFIX="${1}" # override default of secret/
        shift || fail "${0//*/} ... vault-prefix \"secret/...\""
        ;;
      (region)
        export OCFP_REGION=$1 # ex: us-east-1, us-west-2
        shift || fail "${0//*/} ... region <region>"
        ;;
      (kit)
        export OCFP_KIT=$1
        shift || fail "${0//*/} ... kit <name>"
        case ${OCFP_KIT} in
          (bosh|cf|blacksmith|shield|concourse|autoscaler|scheduler|vault|jumpbox|stratos) true ;;
          (*) fail "Unsupported kit: ${OCFP_KIT}" ;;
        esac ;;
      (env)
        export OCFP_ENV_NAME=${1//.yml}
        shift || fail "${0//*/} ... name <env-name> # ex: ocfp-codex-mgmt-us-east-1 / ocfp-codex-us-east-1"
        ;;
      (iaas)
        export OCFP_IAAS="$1"
        shift || fail "${0//*/} ... iaas <aws|azure|gcp|openstack|vsphere|warden>"
        case ${OCFP_IAAS} in
          #NOTE: Upstream are alicloud aws azure cloudstack docker gcp openstack softlayer vcloud virtualbox vsphere warden
          (aws|azure|gcp|openstack|vsphere|warden) true ;;
          (*) fail "Unsupported IAAS type: ${OCFP_IAAS}" ;;
        esac
        ;;
      (bosh)
        export OCFP_BOSH_ENV="$1"
        shift || fail "${0//*/} ... bosh <bosh-env-name>"
        ;;
      (*)
        usage
        ;;
    esac
  done

  [[ -n ${OCFP_ENV_NAME} ]] || fail "'env <name>' must be given"
  if [[ ${cmd} != "test" ]]; then
    [[ -n ${OCFP_REGION} ]]   || fail "'region <region>' must be given"
    [[ -n ${OCFP_KIT} ]]      || fail "'kit <name>' must be given"
  fi

  set::env::type

  # All envs need to know their deployer/bosh_env, mgmt bosh is the exception
  if ! [[ ${OCFP_KIT} == "bosh" && ${env_type} == "mgmt" ]] && [[ $cmd != "test" ]]
  then [[ -n ${OCFP_BOSH_ENV} ]] || fail "'bosh <bosh-env-name>' must be given"
  fi

  case ${OCFP_KIT} in
    (bosh)
      [[ -n ${OCFP_IAAS} ]] || fail "'iaas <aws|gcp|azure>' must be given"
      ;;
  esac
}

set::env::type() {
  debug "${FUNCNAME[0]}: $*"

  case "${OCFP_ENV_NAME}" in
    (*-mgmt-*) env_type="mgmt" ;;
    (*)        env_type="ocf"  ;;
  esac
  export OCFP_ENV_TYPE="${env_type}"
}

################################################################################
# Main
################################################################################
declare env kit vault_prefix secrets_path src_path dst_path
 
scripts_path="$(dirname "${0}")"
vault_prefix="secret/"

[[ -n ${env} ]] && [[ -n ${vault_prefix} ]] && [[ -n ${kit} ]] ||
  fail "env, vault-prefix, and kit must be given"

OCFP_VAULT_TF_PATH=${vault_prefix}/tf/${env//-/\/}
OCFP_VAULT_ENV_PATH=${vault_prefix}/${env//-/\/}

if [[ -s ${OCFP_ENV_NAME}.yml ]] 
then fail "ERROR: ${OCFP_ENV_NAME}.yml already exists, rename it and re-run."
fi

src_path="${OCFP_VAULT_TF_PATH}/bosh/iam/${env_type}"
dst_path="${OCFP_VAULT_ENV_PATH}/bosh"

case "${OCFP_KIT}" in
  (bosh)
    case "${OCFP_IAAS}" in
      (aws)
        safe cp "${src_path}/bosh" "${dst_path}/aws"
        safe cp "${src_path}/s3" "${dst_path}/blobstore/s3"
        ;;
      (*) fail "Not Yet Implemented" ;;
    esac
    ;;
esac

[[ -z ${OCFP_BOSH_ENV} ]] ||
  safe set "${dst_path}/env" bosh="${OCFP_BOSH_ENV}"

echo -e "Generating Genesis Env File From Kit Template...\n\t-> ${OCFP_ENV_NAME}.yml"

bash "${scripts_path}/templates/env/${OCFP_KIT}" > ${OCFP_ENV_NAME}.yml
