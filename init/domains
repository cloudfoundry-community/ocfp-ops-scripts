#!/usr/bin/env bash

fail() { echo -e "\e[31mERROR:\e[0m $*" >&2 ; exit 1 ; }

run()  { echo -e "\e[32m\$\e[0m $*"; "$@"; }

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

usage() {
  fail "Usage: ${0//*\/} env <name> vault-prefix <path>\nNOTE: vault-prefix defaults to secret/"
}

args::parse() {
  debug "${FUNCNAME[0]}: $*"
  local action

  while [[ $# -gt 0 ]]; do
    action="$1"
    case "${action}" in
      (env)
        env_name="$2"
        shift 2 || fail "${0//*/} ... env <name> # ex: secret/a/b"
        ;;
      (vault-prefix)
        vault_prefix="$2"
        shift 2 || fail "${0//*/} ... vault-prefix <path> # ex: secret/a/b"
        ;;
      (-h|--help)
        usage
        ;;
      (-d|--debug)
        DEBUG=1
        ;;
      (*) 
        fail "Unknown option: $1"
        ;;
    esac
  done

  [[ -n ${env_name:-} ]] || usage
}

cf::login() {
  debug "${FUNCNAME[0]}: $*"
  local env=$1
  ( cd ~/deployments/cf
    genesis ${env} do login
  ) || fail "Failed to login to ${env}!"
  run cf target -o system
}

vault::handshake() {
  debug "${FUNCNAME[0]}: $*"
  local handshake="$(safe get ${vault_prefix}/handshake:knock)"
  [[ -n ${handshake} ]] ||
  fail "Vault handshake failed (${vault_prefix}/handshake:knock), is the 'vault-prefix' correct?"
}
 
declare  \
  env_name \
  apps_domain \
  handshake \
  vault_path \
  vault_prefix="secret/"

args::parse "$@"

vault::handshake

vault_path="${vault_prefix}/exodus/${env_name}/cf:apps_domain"
apps_domain="$(safe get ${vault_path})"
# TODO: Can we fetch apps domain from logged in cf instead of vault?

[[ -n ${apps_domain} ]] ||
  fail "apps_domain not found in vault at ${vault_path}"

debug "env_name: ${env_name}, vault_prefix: ${vault_prefix}, vault_path: ${vault_path}"

cf::login ${env_name}

echo -e "\n[BEFORE] Domains for ${env_name}:"
run cf domains

echo -e "\nChecking apps.internal..."
apps_internal_domain=$(
  cf curl /v3/domains |
    jq -r '.resources[] | select(.name | contains("apps.internal")) | .name'
)

if [[ ${apps_internal_domain} == "apps.internal" ]]
then
  echo -e "[\e[32mOK\e[0m] apps.internal exists for ${env_name}!"
else
  echo -e "Creating apps.internal for ${env_name}..."
  run cf create-shared-domain apps.internal --internal
fi

echo -e "\nChecking tcp.${apps_domain}..."
tcp_domain=$(
  cf curl /v3/domains |
    jq -r '.resources[] | select(.name | contains("tcp.'${apps_domain}'")) | .name'
)
if [[ ${apps_internal_domain} == "apps.internal" ]]
then
  echo -e "[\e[32mOK\e[0m] tcp.${apps_domain} exists for ${env_name}!"
else
  echo -e "Creating tcp.${apps_domain} for ${env_name}..."
  run cf create-shared-domain "tcp.${apps_domain}" --router-group default-tcp
fi

echo -e "\n[AFTER] Domains for ${env_name}:"
run cf domains

exit 0
